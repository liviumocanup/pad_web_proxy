// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	common "track_service/proto/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackServiceClient is the client API for TrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackServiceClient interface {
	Upload(ctx context.Context, in *common.TrackMetadata, opts ...grpc.CallOption) (*TrackResponse, error)
	GetInfoById(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*TrackInfoResponse, error)
	EditInfo(ctx context.Context, in *EditTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteById(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TrackListResponse, error)
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.StatusResponse, error)
}

type trackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackServiceClient(cc grpc.ClientConnInterface) TrackServiceClient {
	return &trackServiceClient{cc}
}

func (c *trackServiceClient) Upload(ctx context.Context, in *common.TrackMetadata, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/TrackService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetInfoById(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*TrackInfoResponse, error) {
	out := new(TrackInfoResponse)
	err := c.cc.Invoke(ctx, "/TrackService/GetInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) EditInfo(ctx context.Context, in *EditTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/TrackService/EditInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) DeleteById(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/TrackService/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TrackListResponse, error) {
	out := new(TrackListResponse)
	err := c.cc.Invoke(ctx, "/TrackService/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.StatusResponse, error) {
	out := new(common.StatusResponse)
	err := c.cc.Invoke(ctx, "/TrackService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServiceServer is the server API for TrackService service.
// All implementations must embed UnimplementedTrackServiceServer
// for forward compatibility
type TrackServiceServer interface {
	Upload(context.Context, *common.TrackMetadata) (*TrackResponse, error)
	GetInfoById(context.Context, *TrackIdRequest) (*TrackInfoResponse, error)
	EditInfo(context.Context, *EditTrackRequest) (*emptypb.Empty, error)
	DeleteById(context.Context, *TrackIdRequest) (*emptypb.Empty, error)
	FindAll(context.Context, *emptypb.Empty) (*TrackListResponse, error)
	Status(context.Context, *emptypb.Empty) (*common.StatusResponse, error)
	mustEmbedUnimplementedTrackServiceServer()
}

// UnimplementedTrackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackServiceServer struct {
}

func (UnimplementedTrackServiceServer) Upload(context.Context, *common.TrackMetadata) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedTrackServiceServer) GetInfoById(context.Context, *TrackIdRequest) (*TrackInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoById not implemented")
}
func (UnimplementedTrackServiceServer) EditInfo(context.Context, *EditTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInfo not implemented")
}
func (UnimplementedTrackServiceServer) DeleteById(context.Context, *TrackIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedTrackServiceServer) FindAll(context.Context, *emptypb.Empty) (*TrackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedTrackServiceServer) Status(context.Context, *emptypb.Empty) (*common.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTrackServiceServer) mustEmbedUnimplementedTrackServiceServer() {}

// UnsafeTrackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackServiceServer will
// result in compilation errors.
type UnsafeTrackServiceServer interface {
	mustEmbedUnimplementedTrackServiceServer()
}

func RegisterTrackServiceServer(s grpc.ServiceRegistrar, srv TrackServiceServer) {
	s.RegisterService(&TrackService_ServiceDesc, srv)
}

func _TrackService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TrackMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Upload(ctx, req.(*common.TrackMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackService/GetInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetInfoById(ctx, req.(*TrackIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_EditInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).EditInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackService/EditInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).EditInfo(ctx, req.(*EditTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackService/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).DeleteById(ctx, req.(*TrackIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackService/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).FindAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackService_ServiceDesc is the grpc.ServiceDesc for TrackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrackService",
	HandlerType: (*TrackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _TrackService_Upload_Handler,
		},
		{
			MethodName: "GetInfoById",
			Handler:    _TrackService_GetInfoById_Handler,
		},
		{
			MethodName: "EditInfo",
			Handler:    _TrackService_EditInfo_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _TrackService_DeleteById_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _TrackService_FindAll_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TrackService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "track.proto",
}
