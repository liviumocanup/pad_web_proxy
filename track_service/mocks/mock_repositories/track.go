// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/track.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "track_service/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTrackRepository is a mock of TrackRepository interface.
type MockTrackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrackRepositoryMockRecorder
}

// MockTrackRepositoryMockRecorder is the mock recorder for MockTrackRepository.
type MockTrackRepositoryMockRecorder struct {
	mock *MockTrackRepository
}

// NewMockTrackRepository creates a new mock instance.
func NewMockTrackRepository(ctrl *gomock.Controller) *MockTrackRepository {
	mock := &MockTrackRepository{ctrl: ctrl}
	mock.recorder = &MockTrackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackRepository) EXPECT() *MockTrackRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTrackRepository) Create(track *models.Track) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", track)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTrackRepositoryMockRecorder) Create(track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTrackRepository)(nil).Create), track)
}

// Delete mocks base method.
func (m *MockTrackRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTrackRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTrackRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockTrackRepository) FindAll() ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTrackRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTrackRepository)(nil).FindAll))
}

// GetById mocks base method.
func (m *MockTrackRepository) GetById(id string) (*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTrackRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTrackRepository)(nil).GetById), id)
}

// GetByTitleAndUserId mocks base method.
func (m *MockTrackRepository) GetByTitleAndUserId(title, userId string) (*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitleAndUserId", title, userId)
	ret0, _ := ret[0].(*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitleAndUserId indicates an expected call of GetByTitleAndUserId.
func (mr *MockTrackRepositoryMockRecorder) GetByTitleAndUserId(title, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitleAndUserId", reflect.TypeOf((*MockTrackRepository)(nil).GetByTitleAndUserId), title, userId)
}

// GetByUserId mocks base method.
func (m *MockTrackRepository) GetByUserId(userId string) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockTrackRepositoryMockRecorder) GetByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockTrackRepository)(nil).GetByUserId), userId)
}

// Update mocks base method.
func (m *MockTrackRepository) Update(track *models.Track) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", track)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTrackRepositoryMockRecorder) Update(track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTrackRepository)(nil).Update), track)
}
